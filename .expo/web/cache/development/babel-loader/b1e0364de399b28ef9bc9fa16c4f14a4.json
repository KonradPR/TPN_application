{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\masksdetection-react-native-app\\\\PredictionView.js\";\nimport React, { useState, useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Button, Input } from 'react-native-elements';\nimport ilustrations from \"./images.js\";\nvar deviceWidth = Dimensions.get('window').width;\nvar FIXED_BAR_WIDTH = 280;\nvar BAR_SPACE = 10;\nexport default function PredictionView(props) {\n  var _this = this;\n\n  var prediction = props.prediction;\n  numItems = Object.keys(prediction).length;\n  var predictions = [];\n\n  for (var key in prediction) {\n    predictions[parseInt(key)] = prediction[key];\n  }\n\n  itemWidth = FIXED_BAR_WIDTH / this.numItems - (this.numItems - 1) * BAR_SPACE;\n  animVal = new Animated.Value(0);\n  var imageArray = [];\n  var barArray = [];\n  predictions.forEach(function (predicition, i) {\n    var thisImage = React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, React.createElement(Image, {\n      key: \"image\" + i,\n      source: ilustrations[prediction[\"name\"]],\n      style: {\n        width: deviceWidth\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }));\n    imageArray.push(thisImage);\n\n    var scrollBarVal = _this.animVal.interpolate({\n      inputRange: [deviceWidth * (i - 1), deviceWidth * (i + 1)],\n      outputRange: [-_this.itemWidth, _this.itemWidth],\n      extrapolate: 'clamp'\n    });\n\n    var thisBar = React.createElement(View, {\n      key: \"bar\" + i,\n      style: [styles.track, {\n        width: _this.itemWidth,\n        marginLeft: i === 0 ? 0 : BAR_SPACE\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, React.createElement(Animated.View, {\n      style: [styles.bar, {\n        width: _this.itemWidth,\n        transform: [{\n          translateX: scrollBarVal\n        }]\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }));\n    barArray.push(thisBar);\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    flex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    scrollEventThrottle: 10,\n    pagingEnabled: true,\n    onScroll: Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: this.animVal\n        }\n      }\n    }]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, imageArray), React.createElement(View, {\n    style: styles.barContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, barArray));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  image: {\n    width: 150,\n    height: 150\n  },\n  horizontal: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  barContainer: {\n    position: 'absolute',\n    zIndex: 2,\n    top: 40,\n    flexDirection: 'row'\n  },\n  track: {\n    backgroundColor: '#ccc',\n    overflow: 'hidden',\n    height: 2\n  },\n  bar: {\n    backgroundColor: '#5294d6',\n    height: 2,\n    position: 'absolute',\n    left: 0,\n    top: 0\n  }\n});","map":{"version":3,"sources":["C:/Users/Dell/Desktop/masksdetection-react-native-app/PredictionView.js"],"names":["React","useState","useEffect","Button","Input","ilustrations","deviceWidth","Dimensions","get","width","FIXED_BAR_WIDTH","BAR_SPACE","PredictionView","props","prediction","numItems","Object","keys","length","predictions","key","parseInt","itemWidth","animVal","Animated","Value","imageArray","barArray","forEach","predicition","i","thisImage","push","scrollBarVal","interpolate","inputRange","outputRange","extrapolate","thisBar","styles","track","marginLeft","bar","transform","translateX","container","event","nativeEvent","contentOffset","x","barContainer","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","image","height","horizontal","position","zIndex","top","flexDirection","overflow","left"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from 'react';\r\nimport { Animated, View, StyleSheet, Image, Dimensions, ScrollView } from 'react-native';\r\nimport { Button, Input } from 'react-native-elements';\r\nimport ilustrations from './images.js';\r\n\r\nconst deviceWidth = Dimensions.get('window').width\r\nconst FIXED_BAR_WIDTH = 280\r\nconst BAR_SPACE = 10\r\n\r\nexport default function PredictionView(props) {\r\n\r\n  const prediction = props.prediction;\r\n  numItems = Object.keys(prediction).length;\r\n  const predictions = [];\r\n  for (const key in prediction) {\r\n    predictions[parseInt(key)] = prediction[key]\r\n        }\r\n  \r\n  itemWidth = (FIXED_BAR_WIDTH / this.numItems) - ((this.numItems - 1) * BAR_SPACE)\r\n  animVal = new Animated.Value(0) \r\n  let imageArray = []\r\n  let barArray = []\r\n  predictions.forEach((predicition, i) => {\r\n    const thisImage = (\r\n      <View>\r\n        <Image\r\n          key={`image${i}`}\r\n          source={ilustrations[prediction[\"name\"]]}\r\n          style={{ width: deviceWidth }}\r\n       />\r\n      </View>\r\n    )\r\n    imageArray.push(thisImage)\r\n\r\n    const scrollBarVal = this.animVal.interpolate({\r\n      inputRange: [deviceWidth * (i - 1), deviceWidth * (i + 1)],\r\n      outputRange: [-this.itemWidth, this.itemWidth],\r\n      extrapolate: 'clamp',\r\n    })\r\n\r\n    const thisBar = (\r\n      <View\r\n        key={`bar${i}`}\r\n        style={[\r\n          styles.track,\r\n          {\r\n            width: this.itemWidth,\r\n            marginLeft: i === 0 ? 0 : BAR_SPACE,\r\n          },\r\n        ]}\r\n      >\r\n        <Animated.View\r\n\r\n          style={[\r\n            styles.bar,\r\n            {\r\n              width: this.itemWidth,\r\n              transform: [\r\n                { translateX: scrollBarVal },\r\n              ],\r\n            },\r\n          ]}\r\n        />\r\n      </View>\r\n    )\r\n    barArray.push(thisBar)\r\n  })\r\n\r\n \r\n    return (\r\n      <View\r\n      style={styles.container}\r\n      flex={1}\r\n    >\r\n      <ScrollView\r\n        horizontal\r\n        showsHorizontalScrollIndicator={false}\r\n        scrollEventThrottle={10}\r\n        pagingEnabled\r\n        onScroll={\r\n          Animated.event(\r\n            [{ nativeEvent: { contentOffset: { x: this.animVal } } }]\r\n          )\r\n        }\r\n      >\r\n\r\n        {imageArray}\r\n\r\n      </ScrollView>\r\n      <View\r\n        style={styles.barContainer}\r\n      >\r\n        {barArray}\r\n      </View>\r\n    </View> \r\n      )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#fff',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    image:{\r\n      width:150,\r\n      height:150,\r\n    },\r\n    horizontal:{\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    barContainer: {\r\n      position: 'absolute',\r\n      zIndex: 2,\r\n      top: 40,\r\n      flexDirection: 'row',\r\n    },\r\n    track: {\r\n      backgroundColor: '#ccc',\r\n      overflow: 'hidden',\r\n      height: 2,\r\n    },\r\n    bar: {\r\n      backgroundColor: '#5294d6',\r\n      height: 2,\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n    },\r\n  });\r\n  "]},"metadata":{},"sourceType":"module"}