{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\masksdetection-react-native-app\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Button, Input } from 'react-native-elements';\nimport * as tf from '@tensorflow/tfjs';\nimport { fetch, bundleResourceIO } from '@tensorflow/tfjs-react-native';\nimport * as jpeg from 'jpeg-js';\nimport { cameraWithTensors } from '@tensorflow/tfjs-react-native';\nimport { Camera } from 'expo-camera';\nimport * as ImagePicker from 'expo-image-picker';\nimport { decode as atob, encode as btoa } from 'base-64';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport PredictionView from \"./PredictionView.js\";\nimport LoadingView from \"./LoadingView.js\";\nvar TensorCamera = cameraWithTensors(Camera);\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEnabled = _useState2[0],\n      setIsEnabled = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      predictionSet = _useState4[0],\n      setpredictionSet = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      predicition = _useState6[0],\n      setprediction = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      useCam = _useState8[0],\n      setUseCam = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      plantModel = _useState10[0],\n      setPlantModel = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      hasPermission = _useState12[0],\n      setHasPermission = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      imageFromCamera = _useState14[0],\n      setImageFromCamera = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      loading = _useState16[0],\n      setLoading = _useState16[1];\n\n  var _useState17 = useState(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      isStarting = _useState18[0],\n      setStarting = _useState18[1];\n\n  var textureDims = Platform.OS === \"ios\" ? {\n    width: 1080,\n    height: 1920\n  } : {\n    width: 1600,\n    height: 1200\n  };\n  var tensorDims = {\n    width: 224,\n    height: 224\n  };\n  useEffect(function () {\n    function loadModel() {\n      var _await$ImagePicker$re, status, tfReady, modelJson, modelWeight, model;\n\n      return _regeneratorRuntime.async(function loadModel$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"[+] Application started\");\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n              console.log(\"permissions status: \" + status);\n              setHasPermission(status === 'granted');\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(tf.ready());\n\n            case 9:\n              tfReady = _context.sent;\n              console.log(\"[+] Loading model\");\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(require(\"./assets/model/model.json\"));\n\n            case 13:\n              modelJson = _context.sent;\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(require(\"./assets/model/group1-shard.bin\"));\n\n            case 16:\n              modelWeight = _context.sent;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(tf.loadGraphModel(bundleResourceIO(modelJson, modelWeight)));\n\n            case 19:\n              model = _context.sent;\n              setPlantModel(model);\n              console.log(\"[+] Model Loaded\");\n              setLoading(false);\n              setStarting(false);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    loadModel();\n  }, []);\n\n  function findIndicesOfMax(inp, count) {\n    var outp = [];\n\n    for (var i = 0; i < inp.length; i++) {\n      outp.push(i);\n\n      if (outp.length > count) {\n        outp.sort(function (a, b) {\n          return inp[b] - inp[a];\n        });\n        outp.pop();\n      }\n    }\n\n    return outp;\n  }\n\n  var getFromCamera = function getFromCamera() {\n    var result, indices, predictions, i;\n    return _regeneratorRuntime.async(function getFromCamera$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            setLoading(true);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(plantModel.predict(tf.cast(imageFromCamera.expandDims(0), 'float32')).data());\n\n          case 4:\n            result = _context2.sent;\n            console.log(result);\n            indices = findIndicesOfMax(result, 5);\n            console.log(\"[+] Prediction Completed\");\n            predictions = {};\n\n            for (i = 0; i < indices.length; i++) {\n              predictions[i] = {\n                name: labels[indices[i]],\n                probablity: result[indices[i]]\n              };\n            }\n\n            setprediction(predictions);\n            setLoading(false);\n            setpredictionSet(true);\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var switchView = function switchView() {\n    setUseCam(!useCam);\n  };\n\n  function imageToTensor(rawImageData) {\n    var TO_UINT8ARRAY = true;\n\n    var _jpeg$decode = jpeg.decode(rawImageData, TO_UINT8ARRAY),\n        width = _jpeg$decode.width,\n        height = _jpeg$decode.height,\n        data = _jpeg$decode.data;\n\n    var buffer = new Uint8Array(width * height * 3);\n    var offset = 0;\n\n    for (var i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      offset += 4;\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  function base64ToArrayBuffer(base64) {\n    var binary_string = atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n\n    for (var i = 0; i < len; i++) {\n      bytes[i] = binary_string.charCodeAt(i);\n    }\n\n    return bytes.buffer;\n  }\n\n  var getFromGallery = function getFromGallery() {\n    var responsey, rawImageData, imageTensor, result, indices, predictions, i;\n    return _regeneratorRuntime.async(function getFromGallery$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            console.log(\"taking picture\");\n            setLoading(true);\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              base64: true,\n              quality: 1\n            }));\n\n          case 5:\n            responsey = _context3.sent;\n            console.log(\"after\");\n            rawImageData = base64ToArrayBuffer(responsey.base64);\n            imageTensor = imageToTensor(rawImageData).resizeBilinear([224, 224]);\n            _context3.next = 11;\n            return _regeneratorRuntime.awrap(plantModel.predict(imageTensor.expandDims(0)).data());\n\n          case 11:\n            result = _context3.sent;\n            console.log(result);\n            indices = findIndicesOfMax(result, 5);\n            console.log(\"[+] Prediction Completed\");\n            predictions = {};\n\n            for (i = 0; i < indices.length; i++) {\n              predictions[i] = {\n                name: labels[indices[i]],\n                probablity: result[indices[i]]\n              };\n            }\n\n            console.log(predictions);\n            setprediction(predictions);\n            setLoading(false);\n            setpredictionSet(true);\n            _context3.next = 26;\n            break;\n\n          case 23:\n            _context3.prev = 23;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 23]], Promise);\n  };\n\n  function handleCameraStream(images, updatePreview, gl) {\n    var loop = function loop() {\n      var nextImageTensor;\n      return _regeneratorRuntime.async(function loop$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              nextImageTensor = images.next().value;\n              setImageFromCamera(nextImageTensor);\n              requestAnimationFrame(loop);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    loop();\n  }\n\n  if (loading) {\n    return React.createElement(LoadingView, {\n      isStarting: isStarting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 14\n      }\n    });\n  } else if (predictionSet) {\n    var back = function back() {\n      return setpredictionSet(false);\n    };\n\n    return React.createElement(PredictionView, {\n      prediction: predicition,\n      back: back,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 12\n      }\n    });\n  } else if (useCam) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 12\n      }\n    }, React.createElement(TensorCamera, {\n      style: styles.camera,\n      type: Camera.Constants.Type.front,\n      cameraTextureHeight: textureDims.height,\n      cameraTextureWidth: textureDims.width,\n      resizeHeight: 224,\n      resizeWidth: 224,\n      resizeDepth: 3,\n      onReady: handleCameraStream,\n      autorender: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 8\n      }\n    }), React.createElement(Button, {\n      title: \"Camera\",\n      onPress: function onPress() {\n        getFromCamera();\n      },\n      disabled: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }), React.createElement(Button, {\n      title: \"Back\",\n      onPress: function onPress() {\n        switchView();\n      },\n      disabled: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }));\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }\n    }, React.createElement(Button, {\n      title: \"Gallery\",\n      onPress: function onPress() {\n        getFromGallery();\n      },\n      disabled: !isEnabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }), React.createElement(Button, {\n      title: \"Camera\",\n      onPress: function onPress() {\n        switchView();\n      },\n      disabled: !isEnabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  cameraView: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-end',\n    width: '100%',\n    height: '100%',\n    paddingTop: 10\n  },\n  camera: {\n    width: 700 / 2,\n    height: 800 / 2,\n    zIndex: 1,\n    borderWidth: 0,\n    borderRadius: 0\n  }\n});\nvar labels = [\"aster alpejski\", \"babka lancetowata\", \"bażyna czarna\", \"bez koralowy\", \"borówka czarna\", \"bylica pospolita\", \"czosnek skalny\", \"dzięgiel litwor\", \"jaskier alpejski\", \"koniczyna łąkowa\", \"konwalia majowa\", \"len karpacki\", \"mniszek pospolity\", \"nawłoć alpejska\", \"oset siny\", \"paprotka zwyczajna\", \"rdest plamisty\", \"róża alpejska\", \"sasanka alpejska\", \"skrzyp polny\", \"szafran spiski\", \"zawilec żółty\"];","map":{"version":3,"sources":["C:/Users/Dell/Desktop/masksdetection-react-native-app/App.js"],"names":["React","useState","useEffect","Button","Input","tf","fetch","bundleResourceIO","jpeg","cameraWithTensors","Camera","ImagePicker","decode","atob","encode","btoa","PredictionView","LoadingView","TensorCamera","App","isEnabled","setIsEnabled","predictionSet","setpredictionSet","predicition","setprediction","useCam","setUseCam","plantModel","setPlantModel","hasPermission","setHasPermission","imageFromCamera","setImageFromCamera","loading","setLoading","isStarting","setStarting","textureDims","Platform","OS","width","height","tensorDims","loadModel","console","log","requestCameraPermissionsAsync","status","ready","tfReady","require","modelJson","modelWeight","loadGraphModel","model","findIndicesOfMax","inp","count","outp","i","length","push","sort","a","b","pop","getFromCamera","predict","cast","expandDims","data","result","indices","predictions","name","labels","probablity","switchView","imageToTensor","rawImageData","TO_UINT8ARRAY","buffer","Uint8Array","offset","tensor3d","base64ToArrayBuffer","base64","binary_string","len","bytes","charCodeAt","getFromGallery","launchImageLibraryAsync","quality","responsey","imageTensor","resizeBilinear","handleCameraStream","images","updatePreview","gl","loop","nextImageTensor","next","value","requestAnimationFrame","back","styles","container","camera","Constants","Type","front","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","cameraView","display","flexDirection","paddingTop","zIndex","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from 'react';\r\nimport { StyleSheet, View,Image, TouchableOpacity, Text } from 'react-native';\r\nimport { Button, Input } from 'react-native-elements';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { fetch, bundleResourceIO } from '@tensorflow/tfjs-react-native';\r\nimport * as jpeg from 'jpeg-js';\r\nimport {cameraWithTensors} from '@tensorflow/tfjs-react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport {decode as atob, encode as btoa} from 'base-64'\r\nimport { Platform, ActivityIndicator } from 'react-native';\r\nimport PredictionView from './PredictionView.js';\r\nimport LoadingView from './LoadingView.js'\r\nconst TensorCamera = cameraWithTensors(Camera);\r\n\r\nexport default function App() {\r\n    const [isEnabled,setIsEnabled] = useState(true)\r\n    const [predictionSet,setpredictionSet] = useState(false)\r\n    const [predicition,setprediction] = useState(\"\")\r\n    const [useCam,setUseCam] = useState(false)\r\n    const [plantModel,setPlantModel]=useState(\"\")\r\n    const [hasPermission, setHasPermission] = useState(null);\r\n    const [imageFromCamera, setImageFromCamera] = useState(null);\r\n    const [loading,setLoading] = useState(true)\r\n    const [isStarting,setStarting] = useState(true)\r\n    const textureDims = Platform.OS === \"ios\"? { width: 1080, height: 1920 } : { width: 1600, height: 1200 };\r\n    const tensorDims = { width: 224, height: 224 }; \r\n    useEffect(() => {\r\n      async function loadModel(){\r\n        console.log(\"[+] Application started\")\r\n        const { status } = await ImagePicker.requestCameraPermissionsAsync();\r\n        console.log(`permissions status: ${status}`);\r\n        setHasPermission(status === 'granted');\r\n        //Wait for tensorflow module to be ready\r\n        const tfReady = await tf.ready();\r\n        console.log(\"[+] Loading model\")\r\n        const modelJson = await require(\"./assets/model/model.json\");\r\n        const modelWeight = await require(\"./assets/model/group1-shard.bin\");\r\n        const model = await tf.loadGraphModel(bundleResourceIO(modelJson,modelWeight));\r\n        setPlantModel(model)\r\n        console.log(\"[+] Model Loaded\")\r\n        setLoading(false);\r\n        setStarting(false);\r\n      }\r\n      loadModel()\r\n    }, []); \r\n\r\n    function findIndicesOfMax(inp, count) {\r\n      var outp = [];\r\n      for (var i = 0; i < inp.length; i++) {\r\n          outp.push(i); // add index to output array\r\n          if (outp.length > count) {\r\n              outp.sort(function(a, b) { return inp[b] - inp[a]; }); // descending sort the output array\r\n              outp.pop(); // remove the last index (index of smallest element in output array)\r\n          }\r\n      }\r\n      return outp;\r\n  }\r\n\r\n    const getFromCamera = async() => {\r\n      try{\r\n        setLoading(true);\r\n        let result = await plantModel.predict(tf.cast(imageFromCamera.expandDims(0),'float32')).data();\r\n        console.log(result);\r\n        //let maximum = result.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\r\n        //console.log(\"[+] Prediction Completed\")\r\n        //setprediction(labels[maximum])\r\n        let indices = findIndicesOfMax(result,5)\r\n        console.log(\"[+] Prediction Completed\")\r\n        //setprediction(labels[maximum])\r\n        let predictions = {}\r\n        for(let i=0;i<indices.length;i++){\r\n          predictions[i] = {name:labels[indices[i]],probablity:result[indices[i]]}\r\n        }\r\n        setprediction(predictions);\r\n        setLoading(false);\r\n        setpredictionSet(true);\r\n      }catch(error){\r\n        console.log(error)\r\n      }\r\n      \r\n    }\r\n    \r\n    const switchView = () =>{\r\n      setUseCam(!useCam)\r\n    }\r\n\r\n    function imageToTensor(rawImageData){\r\n      //Function to convert jpeg image to tensors\r\n      const TO_UINT8ARRAY = true;\r\n      const { width, height, data } = jpeg.decode(rawImageData, TO_UINT8ARRAY);\r\n      const buffer = new Uint8Array(width * height * 3);\r\n      let offset = 0; // offset into original data\r\n      for (let i = 0; i < buffer.length; i += 3) {\r\n        buffer[i] = data[offset];\r\n        buffer[i + 1] = data[offset + 1];\r\n        buffer[i + 2] = data[offset + 2];\r\n        offset += 4;\r\n      }\r\n      return tf.tensor3d(buffer, [height, width, 3]);\r\n    }\r\n\r\n    function base64ToArrayBuffer(base64) {\r\n      var binary_string = atob(base64);\r\n      var len = binary_string.length;\r\n      var bytes = new Uint8Array(len);\r\n      for (var i = 0; i < len; i++) {\r\n          bytes[i] = binary_string.charCodeAt(i);\r\n      }\r\n      return bytes.buffer;\r\n  }\r\n    const getFromGallery = async() => {\r\n      try{\r\n        console.log(\"taking picture\");\r\n        setLoading(true);\r\n        const responsey = await ImagePicker.launchImageLibraryAsync({base64: true, quality: 1,});\r\n        console.log(\"after\");\r\n        const rawImageData =  base64ToArrayBuffer(responsey.base64)\r\n      \r\n        const imageTensor = imageToTensor(rawImageData).resizeBilinear([224,224])\r\n        \r\n        let result = await plantModel.predict(imageTensor.expandDims(0)).data()\r\n        console.log(result);\r\n        //let maximum = result.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\r\n        let indices = findIndicesOfMax(result,5)\r\n        console.log(\"[+] Prediction Completed\")\r\n        //setprediction(labels[maximum])\r\n        let predictions = {}\r\n        for(let i=0;i<indices.length;i++){\r\n          predictions[i] = {name:labels[indices[i]],probablity:result[indices[i]]}\r\n        }\r\n        console.log(predictions);\r\n        setprediction(predictions);\r\n        setLoading(false);\r\n        setpredictionSet(true);\r\n      }catch(error){\r\n        console.log(error)\r\n      }\r\n      \r\n    }\r\n    \r\n    function handleCameraStream(images, updatePreview, gl) {\r\n      const loop = async () => {\r\n        const nextImageTensor = images.next().value\r\n        setImageFromCamera(nextImageTensor);\r\n        requestAnimationFrame(loop);\r\n      }\r\n      loop();\r\n    }\r\n\r\n    if(loading){\r\n      return <LoadingView isStarting={isStarting}/>\r\n    }else if(predictionSet){\r\n      const back = () =>setpredictionSet(false);\r\n    return <PredictionView prediction={predicition} back={back}/>\r\n  }else if(useCam){\r\n    return <View style={styles.container}>\r\n       <TensorCamera\r\n           // Standard Camera props\r\n           style={styles.camera}\r\n           type={Camera.Constants.Type.front}\r\n           // Tensor related props\r\n           cameraTextureHeight={textureDims.height}\r\n           cameraTextureWidth={textureDims.width}\r\n           resizeHeight={224}\r\n           resizeWidth={224}\r\n           resizeDepth={3}\r\n           onReady={handleCameraStream}\r\n           autorender={true}\r\n          />\r\n            <Button \r\n          title=\"Camera\"\r\n          onPress={()=>{getFromCamera()}}\r\n          disabled={false}\r\n        />\r\n            <Button \r\n          title=\"Back\"\r\n          onPress={()=>{switchView()}}\r\n          disabled={false}\r\n        />\r\n    </View>\r\n  }else{\r\n  return (\r\n    <View style={styles.container}>\r\n        <Button \r\n          title=\"Gallery\"\r\n          onPress={()=>{getFromGallery()}}\r\n          disabled={!isEnabled}\r\n        />\r\n                <Button \r\n          title=\"Camera\"\r\n          onPress={()=>{switchView()}}\r\n          disabled={!isEnabled}\r\n        />\r\n    </View>\r\n    \r\n  );}\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  cameraView: {\r\n    display: 'flex',\r\n    flex:1,\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'flex-end',\r\n    width: '100%',\r\n    height: '100%',\r\n    paddingTop: 10\r\n  },\r\n  camera : {\r\n    width: 700/2,\r\n    height: 800/2,\r\n    zIndex: 1,\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n  },\r\n});\r\n\r\nconst labels = [\r\n\"aster alpejski\",\r\n\"babka lancetowata\",\r\n\"bażyna czarna\",\r\n\"bez koralowy\",\r\n\"borówka czarna\",\r\n\"bylica pospolita\",\r\n\"czosnek skalny\",\r\n\"dzięgiel litwor\",\r\n\"jaskier alpejski\",\r\n\"koniczyna łąkowa\",\r\n\"konwalia majowa\",\r\n\"len karpacki\",\r\n\"mniszek pospolity\",\r\n\"nawłoć alpejska\",\r\n\"oset siny\",\r\n\"paprotka zwyczajna\",\r\n\"rdest plamisty\",\r\n\"róża alpejska\",\r\n\"sasanka alpejska\",\r\n\"skrzyp polny\",\r\n\"szafran spiski\",\r\n\"zawilec żółty\"\r\n];"]},"metadata":{},"sourceType":"module"}